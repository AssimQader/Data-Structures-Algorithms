/* Implemented by Assim Qader */ 

#include<iostream>
using namespace std;

class Stack {
private:
	int top;
	string names[5];
public:
	Stack()
	{
		top = -1;
		for (int i = 0; i < 5; ++i)
		{
			names[i] = "Unknowm";
		}
	}

	bool isFull() 
	{
		if (top >= 4)
			return true;
		else
			return false;
	}

	bool isEmpty()
	{
		if (top < 0)
			return true;
		else
			return false;
	}

	void push(string n)
	{
		if (isFull())
		{
			cout << "Stack is overflow.\n";
		}
		else
		{
			++top;
			names[top] = n;
		}
	}

	void pop() 
	{
		if (isEmpty())
		{
			cout << "Stack is empty.\n";
		}
		else
		{
			string deletedName = names[top]; //storing before delete.
			names[top] = "Unknown"; //delet proccess
			--top; 
			cout << "The element \"" << deletedName << "\" is deleted.\n";
		}
	}

	void display()
	{
		cout << "All elements in the stack are:\n";
		for (int i = top; i >= 0; --i)
		{
			cout << "   - " << names[i] << "\n";
		}
	}

	void count() 
	{
		if (isEmpty())
			cout << "Stack is empty.\n";
		else
			cout << "The number of the elements in the stack are " << top + 1 << "\n";
	}

	string chang(int pos, string val)
	{
		names[pos] = val;
		return names[pos];
		cout << "The element at position " << pos << " is changed.\n";
	}
};

int main()
{
	Stack s1;
	int number, position;
	string name;
	string newName;

	do 
	{
		cout << " Enter a number for a specific process, or 0 to exist from the program:\n--------------------------------------------\n"
			<< " 1. To push in the stack.\n"
			<< " 2. To delete from the stack.\n"
			<< " 3. To display the elements of the stack.\n"
			<< " 4. To count the number of elements in the stack.\n"
			<< " 5. To change an element.\n"
			<< " 6. To check if the stack is full or not.\n"
			<< " 7. To check if the stack is empty or not.\n";
		cin >> number;
		switch (number)
		{
		case 1:
			cout << "Enter the name:\n";
			cin >> name;
			s1.push(name);
			break;
		case 2:
			s1.pop();
			break;
		case 3:
			s1.display();
		case 4:
			s1.count();
			break;
		case 5:
			cout << "Enter the position of the element you want to replace:\n";
			cin >> position;
			cout << "Enter the name you want to replace with:\n";
			cin >> newName;
			s1.chang(position, newName);
			break;
		case 6:
			if (s1.isFull()) // if true (full)
				cout << "Stack is full.\n";
			else //false (not full)
				cout << "Stack is not full yet.\n";
			break;
		case 7:
			if (s1.isEmpty()) // if true (Empty)
				cout << "Stack is empty.\n";
			else //false (not empty)
				cout << "Stack is not empty yet.\n";
			break;
		default:
			cout << "Program finished.\n\a";
		}
	} 
	while (number != 0);
}
